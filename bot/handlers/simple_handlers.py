import logging
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from bot.config import config
from bot.utils.news_cache import news_cache
from bot.services.scheduler import news_scheduler

logger = logging.getLogger(__name__)

def register_simple_handlers(bot: AsyncTeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    
    @bot.message_handler(commands=['news'])
    async def handle_news_command(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news"""
        try:
            user_id = message.from_user.id
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ—Å—Ç–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            latest_news = await news_cache.get_latest_news(limit=5)
            
            if not latest_news:
                await bot.reply_to(message, "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n"
            
            for i, news_item in enumerate(latest_news, 1):
                title = news_item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                summary = news_item.get('summary', '')
                link = news_item.get('link', '')
                source = news_item.get('source_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                if len(summary) > 200:
                    summary = summary[:197] + '...'
                
                response += f"**{i}. {title}**\n"
                if summary:
                    response += f"{summary}\n"
                response += f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({link})\n"
                response += f"üì° {source}\n\n"
            
            await bot.reply_to(message, response, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /news: {e}")
            await bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    
    @bot.message_handler(commands=['status'])
    async def handle_status_command(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = message.from_user.id
            
            if user_id != config.ADMIN_ID:
                await bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            logger.info(f"üëë –ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cache_stats = await news_cache.get_cache_stats()
            scheduler_status = await news_scheduler.get_scheduler_status()
            
            response = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            response += f"ü§ñ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:** {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_status.get('is_running') else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            response += f"üì∞ **–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:** {cache_stats.get('total_news', 0)}\n"
            response += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(cache_stats.get('categories', {}))}\n"
            response += f"üíæ **–†–∞–∑–º–µ—Ä –∫–µ—à–∞:** {cache_stats.get('cache_size_mb', 0)} –ú–ë\n"
            response += f"üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {scheduler_status.get('active_tasks', 0)}\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = cache_stats.get('categories', {})
            if categories:
                response += "üìã **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
                for category, info in categories.items():
                    count = info.get('count', 0)
                    response += f"‚Ä¢ {category}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            
            await bot.reply_to(message, response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
            await bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    
    @bot.message_handler(commands=['update'])
    async def handle_update_command(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            user_id = message.from_user.id
            
            if user_id != config.ADMIN_ID:
                await bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            logger.info(f"üëë –ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            
            await bot.reply_to(message, "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            results = await news_scheduler.force_full_update()
            
            successful = sum(1 for success in results.values() if success)
            total = len(results)
            
            response = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {successful}/{total} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
            
            for category, success in results.items():
                status = "‚úÖ" if success else "‚ùå"
                response += f"{status} {category}\n"
            
            await bot.reply_to(message, response)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /update: {e}")
            await bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    
    @bot.message_handler(commands=['help'])
    async def handle_help_command(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            user_id = message.from_user.id
            
            response = """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üì∞ /news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚ÑπÔ∏è /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
            if user_id == config.ADMIN_ID:
                response += """
üëë **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**

üìä /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
üîÑ /update - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
"""
            
            await bot.reply_to(message, response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
            await bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    logger.info("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
