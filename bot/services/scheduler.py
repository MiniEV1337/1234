import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
from bot.services.news_processor import news_processor
from bot.utils.news_cache import news_cache
from bot.data.rss_feeds import RSS_FEEDS

logger = logging.getLogger(__name__)

class NewsScheduler:
    def __init__(self):
        self.is_running = False
        self.tasks = []
        self.last_full_update = None
        self.last_cleanup = None
        self.category_rotation_index = 0
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.tasks = [
            asyncio.create_task(self._full_update_loop()),
            asyncio.create_task(self._category_rotation_loop()),
            asyncio.create_task(self._cleanup_loop()),
            asyncio.create_task(self._status_reporter_loop())
        ]
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        try:
            await asyncio.gather(*self.tasks)
        except asyncio.CancelledError:
            logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        finally:
            self.is_running = False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
        if self.tasks:
            await asyncio.gather(*self.tasks, return_exceptions=True)
        
        self.tasks.clear()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _full_update_loop(self):
        """–¶–∏–∫–ª –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
        import os
        interval = int(os.getenv('FULL_UPDATE_INTERVAL', 3600))
        
        logger.info(f"üìÖ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        
        # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self._perform_full_update()
        
        while self.is_running:
            try:
                await asyncio.sleep(interval)
                if self.is_running:
                    await self._perform_full_update()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    async def _category_rotation_loop(self):
        """–¶–∏–∫–ª —Ä–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
        import os
        interval = int(os.getenv('CATEGORY_UPDATE_INTERVAL', 1800))
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        
        categories = list(RSS_FEEDS.keys())
        
        while self.is_running:
            try:
                await asyncio.sleep(interval)
                if self.is_running and categories:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    category = categories[self.category_rotation_index % len(categories)]
                    self.category_rotation_index += 1
                    
                    logger.info(f"üîÑ –†–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
                    await news_processor.process_category_news(category)
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–æ—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 —á–∞—Å–æ–≤)
        import os
        interval = int(os.getenv('CLEANUP_INTERVAL', 21600))
        
        logger.info(f"üßπ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ—á–∏—Å—Ç–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        
        while self.is_running:
            try:
                await asyncio.sleep(interval)
                if self.is_running:
                    await self._perform_cleanup()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞
    
    async def _status_reporter_loop(self):
        """–¶–∏–∫–ª –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—á–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
        interval = 7200
        
        logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ—Ç—á–µ—Ç–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫)")
        
        while self.is_running:
            try:
                await asyncio.sleep(interval)
                if self.is_running:
                    await self._generate_status_report()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
                await asyncio.sleep(300)
    
    async def _perform_full_update(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            start_time = datetime.now()
            
            results = await news_processor.process_all_categories()
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            successful = sum(1 for success in results.values() if success)
            total = len(results)
            
            self.last_full_update = end_time
            
            logger.info(f"‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫: {successful}/{total} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
            for category, success in results.items():
                status = "‚úÖ" if success else "‚ùå"
                logger.info(f"  {status} {category}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _perform_cleanup(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            start_time = datetime.now()
            
            await news_cache.cleanup_old_news()
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            self.last_cleanup = end_time
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def _generate_status_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
            stats = await news_cache.get_cache_stats()
            
            logger.info("üìä === –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ ===")
            logger.info(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {stats.get('archive_location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            logger.info(f"üì∞ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–µ—à–µ: {stats.get('total_news', 0)}")
            logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(stats.get('categories', {}))}")
            logger.info(f"üìÖ –î–Ω–µ–≤–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤: {stats.get('daily_archives', 0)}")
            logger.info(f"üíæ –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {stats.get('cache_size_mb', 0)} –ú–ë")
            
            if self.last_full_update:
                time_since_update = datetime.now() - self.last_full_update
                logger.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time_since_update.total_seconds()/3600:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
            
            if self.last_cleanup:
                time_since_cleanup = datetime.now() - self.last_cleanup
                logger.info(f"üßπ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—á–∏—Å—Ç–∫–∞: {time_since_cleanup.total_seconds()/3600:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = stats.get('categories', {})
            if categories:
                logger.info("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, info in categories.items():
                    count = info.get('count', 0)
                    last_updated = info.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    logger.info(f"  üì∞ {category}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated})")
            
            logger.info("üìä === –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ===")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def force_update_category(self, category: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            success = await news_processor.process_category_news(category, force_update=True)
            
            if success:
                logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {category}: {e}")
            return False
    
    async def force_full_update(self) -> Dict[str, bool]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return await news_processor.process_all_categories()
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {}
    
    async def get_scheduler_status(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            status = {
                'is_running': self.is_running,
                'active_tasks': len([t for t in self.tasks if not t.done()]),
                'last_full_update': self.last_full_update.isoformat() if self.last_full_update else None,
                'last_cleanup': self.last_cleanup.isoformat() if self.last_cleanup else None,
                'category_rotation_index': self.category_rotation_index,
                'total_categories': len(RSS_FEEDS),
                'uptime': None
            }
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return {'error': str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
news_scheduler = NewsScheduler()
