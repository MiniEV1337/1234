"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram News Bot
"""
import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
    errors = []
    warnings = []
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
    }
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    optional_vars = {
        'TOGETHER_API_KEY': 'API –∫–ª—é—á Together AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π',
        'DATABASE_URL': 'URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL',
        'LOG_LEVEL': '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
        'MAX_NEWS_PER_CATEGORY': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
        'NEWS_CACHE_TTL': '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
        'RSS_TIMEOUT': '–¢–∞–π–º–∞—É—Ç –¥–ª—è RSS –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            errors.append(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            if var == 'BOT_TOKEN':
                if not value.count(':') == 1 or len(value.split(':')[0]) < 8:
                    errors.append(f"‚ùå {var} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                else:
                    logger.info(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if not value:
            warnings.append(f"‚ö†Ô∏è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
        else:
            logger.info(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    log_level = os.getenv('LOG_LEVEL', 'INFO')
    if log_level not in ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
        warnings.append(f"‚ö†Ô∏è LOG_LEVEL –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {log_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    numeric_vars = ['MAX_NEWS_PER_CATEGORY', 'NEWS_CACHE_TTL', 'RSS_TIMEOUT']
    for var in numeric_vars:
        value = os.getenv(var)
        if value:
            try:
                int(value)
            except ValueError:
                warnings.append(f"‚ö†Ô∏è {var} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {value}")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if errors:
        logger.error("–ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in errors:
            logger.error(error)
        return False
    
    if warnings:
        logger.warning("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for warning in warnings:
            logger.warning(warning)
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
    return True

def print_config_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã)
    config_vars = [
        'BOT_TOKEN', 'TOGETHER_API_KEY', 'DATABASE_URL',
        'LOG_LEVEL', 'MAX_NEWS_PER_CATEGORY', 'NEWS_CACHE_TTL',
        'RSS_TIMEOUT', 'ENVIRONMENT'
    ]
    
    for var in config_vars:
        value = os.getenv(var, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        
        # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if var in ['BOT_TOKEN', 'TOGETHER_API_KEY', 'DATABASE_URL'] and value != '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ':
            if len(value) > 10:
                value = value[:6] + '...' + value[-4:]
            else:
                value = '***'
        
        logger.info(f"  {var}: {value}")

if __name__ == "__main__":
    print_config_info()
    
    if not validate_config():
        sys.exit(1)
    
    logger.info("üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
